"""
Django settings for postgraduate project.

Generated by 'django-admin startproject' using Django 3.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os, sys
import time

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).parent.parent
sys.path.insert(0, str(BASE_DIR / 'apps'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '^o@+*h=x71qcxp_at0g2f69c60oe(8%cbjz$m@d@ao^7yry5qz'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    # 后台admin框架
    'simpleui',

    # apps
    'basic.apps.BasicConfig',
    'award.apps.AwardConfig',
    'semester.apps.SemesterConfig',
    'common.apps.CommonConfig',
    'scholarship.apps.ScholarshipConfig',
    'myauth.apps.AuthConfig',
    # 功能插件
    'rest_framework',
    'corsheaders',


    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# 引入自定义用户模型
AUTH_USER_MODEL = "myauth.CustomUser"

ROOT_URLCONF = 'urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'

STATIC_ROOT = os.path.join(BASE_DIR, "static")

MEDIA_ROOT = os.path.join(BASE_DIR, 'media').replace('\\', '/')  # 设置静态文件路径为media文件夹
MEDIA_URL = '/media/'

# 指定simpleui默认的主题,指定一个文件名，相对路径就从simpleui的theme目录读取
SIMPLEUI_DEFAULT_THEME = 'admin.lte.css'
# 主页按钮跳转
SIMPLEUI_INDEX = '/'

SIMPLEUI_HOME_INFO = False
# SIMPLEUI_CONFIG = {
#     'system_keep': True,
#     'dynamic': True,    # 设置是否开启动态菜单, 默认为False. 如果开启, 则会在每次用户登陆时动态展示菜单内容
#     'menus': [{
#         'name': '基本信息管理',
#         'icon': 'fas fa-address-book',
#         'models':[{
#             'name':'学生管理',
#             'icon':'fa fa-graduation-cap',
#             'url':'/basic/student/'
#         },{
#             'name':'班级管理',
#             'icon':'fa fa-users',
#             'url':'/basic/studentclass/'
#         },{
#             'name':'导师管理',
#             'icon':'fa fa-user-plus',
#             'url':'/basic/tutor/'
#         }]
#     }]
# }

# 图标
SIMPLEUI_ICON = {
    '学生信息': 'fas fa-graduation-cap',
    '导师信息': 'fas fa-chalkboard-teacher',
    '班级信息': 'fas fa-users',
    '基本信息管理': 'fas fa-address-book',
    '就业信息': 'fas fa-suitcase',
    '贫困生信息': 'fas fa-user-shield',
    '获奖信息': 'fas fa-certificate',
    '专利': 'fas fa-bookmark',
    '专项资金': 'fas fa-money-bill-alt',
    '奖/助学金': 'fas fa-yen-sign',
    '荣誉称号': 'fas fa-award',
    '获奖情况': 'fas fa-trophy',
    '论文': 'fas fa-file',
    '离/返校信息': 'fas fa-plane-departure',
    '学期': 'fas fa-calendar-check',
    '学期管理': 'fas fa-calendar-check',
    '成绩': 'fas fa-school',
    '离/返校控制': 'fas fa-map-marked',
    '公告/文件管理': 'fas fa-bullhorn',
    '文件管理': 'fas fa-file-upload',
    '标签管理': 'fas fa-tags',
    '公告发布': 'fas fa-bullhorn',
    '奖学金评选':'fas fa-balance-scale',
    '奖学金管理':'fas fa-money-check-alt',
    '奖学金申请':'fas fa-copy',
    '用户管理':'fas fa-user'
}

# 静态加载资源
SIMPLEUI_STATIC_OFFLINE = True

# 封装认证返回接口
AUTHENTICATION_BACKENDS = (
    'utils.auth.MyBackend',
)


# JWT认证相关配置
import datetime
JWT_AUTH = {
    'JWT_ENCODE_HANDLER':
        'rest_framework_jwt.utils.jwt_encode_handler',

    'JWT_DECODE_HANDLER':
        'rest_framework_jwt.utils.jwt_decode_handler',

    'JWT_PAYLOAD_HANDLER':
        'rest_framework_jwt.utils.jwt_payload_handler',

    'JWT_PAYLOAD_GET_USER_ID_HANDLER':
        'rest_framework_jwt.utils.jwt_get_user_id_from_payload_handler',

    'JWT_RESPONSE_PAYLOAD_HANDLER':
        'utils.drf.jwt_response_payload_handler',

    # 这是用于签署JWT的密钥，确保这是安全的，不共享不公开的
    # 'JWT_SECRET_KEY': settings.base.SECRET_KEY,
    # 'JWT_GET_USER_SECRET_KEY': None,
    # 'JWT_PUBLIC_KEY': None,
    # 'JWT_PRIVATE_KEY': None,
    # 'JWT_ALGORITHM': 'HS256',
    # 如果秘钥是错误的，它会引发一个jwt.DecodeError
    # 'JWT_VERIFY': True,
    # 'JWT_VERIFY_EXPIRATION': True,
    # 'JWT_LEEWAY': 0,
    # Token过期时间设置
    'JWT_EXPIRATION_DELTA': datetime.timedelta(seconds=50000),
    # 'JWT_AUDIENCE': None,
    # 'JWT_ISSUER': None,

    # 是否开启允许Token刷新服务，及限制Token刷新间隔时间，从原始Token获取开始计算
    'JWT_ALLOW_REFRESH': False,
    'JWT_REFRESH_EXPIRATION_DELTA': datetime.timedelta(days=7),

    # 定义与令牌一起发送的Authorization标头值前缀
    'JWT_AUTH_HEADER_PREFIX': 'JWT',
    'JWT_AUTH_COOKIE': None,
}
# JWT相关认证
REST_FRAMEWORK = {
    # drf默认权限
    # 'DEFAULT_PERMISSION_CLASSES': (
    #     'rest_framework.permissions.IsAuthenticated',
    # ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.AutoSchema',
    'EXCEPTION_HANDLER': 'utils.drf.exception_handler'
}


CORS_ORIGIN_WHITELIST = ()

# 跨域允许的请求方式，可以使用默认值，默认的请求方式为:
# from corsheaders.defaults import default_methods
CORS_ALLOW_METHODS = (
    'GET',
    'POST',
    'PUT',
    'PATCH',
    'DELETE',
    'OPTIONS'
)

# 允许跨域的请求头，可以使用默认值，默认的请求头为:
# from corsheaders.defaults import default_headers
# CORS_ALLOW_HEADERS = default_headers

CORS_ALLOW_HEADERS = (
    'XMLHttpRequest',
    'X_FILENAME',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'Pragma',
)

# 跨域请求时，是否运行携带cookie，默认为False
CORS_ALLOW_CREDENTIALS = True
# 允许所有主机执行跨站点请求，默认为False
# 如果没设置该参数，则必须设置白名单，运行部分白名单的主机才能执行跨站点请求
CORS_ORIGIN_ALLOW_ALL = True
